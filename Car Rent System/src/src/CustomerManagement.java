/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ilma
 */
import java.io.File;
import java.sql.*;

import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

public class CustomerManagement extends javax.swing.JFrame {

    String url = "jdbc:mysql://localhost:3306/car";
    String user = "root";
    String password = "AMJU";
    private String username; // Class variable to hold the current user's username

    private DefaultListModel<String> cusListModel; // Model for the JList

    public CustomerManagement() {
        initComponents(); // Initialize all components

        // Initialize the list model at the beginning of the constructor
        cusListModel = new DefaultListModel<>();
        jList3.setModel(cusListModel); // Set the model for jList3 once

        // Load customer names into the list
        loadcusNames();

        // Add a ListSelectionListener for jList3
        jList3.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) { // Check if the selection is final
                updateFieldsWithSelectedcustomer();
            }
        });
    }

    private void loadcusNames() {
        // Query to get all customer names
        String selectQuery = "SELECT cus_name FROM customer";

        // Clear the model each time before loading new data
        cusListModel.clear();

        try (Connection conn = DriverManager.getConnection(url, user, password); PreparedStatement pstmt = conn.prepareStatement(selectQuery); ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                String customerName = rs.getString("cus_name");
                cusListModel.addElement(customerName); // Add each customer name to the model
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading customer names from the database.");
        }
    }

    private boolean isValidPhone(String phone) {
        return Pattern.matches("\\d{10}", phone);  // Accepts exactly 10 digits
    }

    // Method to validate email address
    private boolean isValidEmail(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$";
        return Pattern.matches(emailRegex, email);
    }

// Variable to store the unique customer ID
    private int selectedCustomerId;

    private void updateFieldsWithSelectedcustomer() {
        String selectedcus = jList3.getSelectedValue(); // Get the selected customer name

        if (selectedcus != null) {
            String query = "SELECT * FROM customer WHERE cus_name = ?";

            try (Connection conn = DriverManager.getConnection(url, user, password); PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, selectedcus);

                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        // Store the unique customer ID
                        selectedCustomerId = rs.getInt("cus_id");

                        // Update fields with the retrieved data
                        textname2.setText(rs.getString("cus_name"));
                        textadd.setText(rs.getString("cus_address"));
                        txtphone.setText(rs.getString("cus_phone"));
                        txtmail.setText(rs.getString("cus_email"));
                        txtRemark.setText(rs.getString("cus_remark"));
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error fetching customer details from the database.");
            }
        }
    }

    private void clearFields() {
        textname2.setText("");
        textadd.setText("");
        txtphone.setText("");
        txtmail.setText("");
        txtRemark.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jPanel7 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textname2 = new javax.swing.JTextField();
        txtmail = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        txtphone = new javax.swing.JTextField();
        textadd = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(137, 139, 139));

        jButton6.setBackground(new java.awt.Color(137, 139, 139));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/home-button (1).png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton6)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton6)
                .addContainerGap(456, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 90, 540));

        jPanel6.setBackground(new java.awt.Color(32, 42, 57));

        jList3.setBackground(new java.awt.Color(137, 139, 139));
        jList3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jPanel7.setBackground(new java.awt.Color(137, 139, 139));

        jLabel43.setBackground(new java.awt.Color(32, 42, 57));
        jLabel43.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel43.setText("Name");

        jLabel44.setBackground(new java.awt.Color(32, 42, 57));
        jLabel44.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel44.setText("Address");

        jLabel45.setBackground(new java.awt.Color(32, 42, 57));
        jLabel45.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel45.setText("Phone");

        jLabel46.setBackground(new java.awt.Color(32, 42, 57));
        jLabel46.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel46.setText("Email");

        jLabel3.setBackground(new java.awt.Color(32, 42, 57));
        jLabel3.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(32, 42, 57));
        jLabel3.setText("Customer Management");

        textname2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textname2ActionPerformed(evt);
            }
        });

        txtmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmailActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(32, 42, 57));
        jButton1.setText("Add Customer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 204, 204));
        jButton3.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        jButton3.setForeground(new java.awt.Color(32, 42, 57));
        jButton3.setText("Delete Customer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        jButton2.setForeground(new java.awt.Color(32, 42, 57));
        jButton2.setText("Update Customer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        jButton4.setForeground(new java.awt.Color(32, 42, 57));
        jButton4.setText("Create Report");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel47.setBackground(new java.awt.Color(32, 42, 57));
        jLabel47.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        jLabel47.setText("Remark");

        txtRemark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemarkActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        txtphone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtphoneActionPerformed(evt);
            }
        });

        textadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textaddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(98, 98, 98))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textname2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textadd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtmail, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                                .addComponent(txtRemark))
                                            .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 68, Short.MAX_VALUE)))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(37, 37, 37)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textname2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textadd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtmail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, 770, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textname2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textname2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textname2ActionPerformed

    private void txtmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmailActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = textname2.getText();
        String address = textadd.getText();
        String phone = txtphone.getText();
        String email = txtmail.getText();
        String remark = txtRemark.getText();

// SQL query to insert data into the customer table
        String insertQuery = "INSERT INTO customer (cus_name, cus_address, cus_phone, cus_email, cus_remark) VALUES (?, ?, ?, ?, ?)";
        String checkNameQuery = "SELECT COUNT(*) FROM customer WHERE cus_name = ?";
        String checkPhoneQuery = "SELECT COUNT(*) FROM customer WHERE cus_phone = ?";
        String checkEmailQuery = "SELECT COUNT(*) FROM customer WHERE cus_email = ?";

        try (Connection conn = DriverManager.getConnection(url, user, password); PreparedStatement checkNameStmt = conn.prepareStatement(checkNameQuery); PreparedStatement checkPhoneStmt = conn.prepareStatement(checkPhoneQuery); PreparedStatement checkEmailStmt = conn.prepareStatement(checkEmailQuery); PreparedStatement insertStmt = conn.prepareStatement(insertQuery)) {

            // Check if the customer name already exists
            checkNameStmt.setString(1, name);
            ResultSet rsName = checkNameStmt.executeQuery();
            rsName.next(); // Move the cursor to the first row

            if (rsName.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "A customer with this name already exists. Please use a different name.");
                return;
            }

            // Check if the phone number is unique
            checkPhoneStmt.setString(1, phone);
            ResultSet rsPhone = checkPhoneStmt.executeQuery();
            rsPhone.next(); // Move the cursor to the first row
            if (rsPhone.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "A customer with this phone number already exists. Please use a different phone number.");
                return;
            }

            // Check if the email is unique
            checkEmailStmt.setString(1, email);
            ResultSet rsEmail = checkEmailStmt.executeQuery();
            rsEmail.next(); // Move the cursor to the first row
            if (rsEmail.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "A customer with this email already exists. Please use a different email.");
                return;
            }

            // Validate required fields
            if (name.isEmpty() || address.isEmpty() || phone.isEmpty() || email.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill all required fields correctly.");
                return;
            }

            if (!isValidPhone(phone)) {
                JOptionPane.showMessageDialog(this, "Invalid phone number. Please enter a valid 10-digit number.");
                return;
            }

            if (!isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "Invalid email address. Please enter a valid email.");
                return;
            }

            // Set the parameters for the insert statement
            insertStmt.setString(1, name);
            insertStmt.setString(2, address);
            insertStmt.setString(3, phone);
            insertStmt.setString(4, email);
            insertStmt.setString(5, remark);

            // Execute the insert statement
            int rowsInserted = insertStmt.executeUpdate();
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Customer data saved successfully!");
                loadcusNames(); // Refresh the customer list if needed
                clearFields(); // Clear input fields
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving customer data.");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String name = textname2.getText();  // Retrieve the supplier's name as a unique identifier

// Check if a supplier name is entered
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the customer name to delete.");
            return;
        }

// Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the customer ? if you delete the customer related rent information will be deleted ",
                "Delete Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;  // User chose not to delete
        }

// SQL query to delete associated rental records from rent table and then from the customer table
        String deleteRentQuery = "DELETE FROM rent WHERE customer_id = (SELECT cus_id FROM customer WHERE cus_name = ?)";
        String deleteCustomerQuery = "DELETE FROM customer WHERE cus_name = ?";

        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            conn.setAutoCommit(false);  // Start transaction

            try (PreparedStatement pstmtRent = conn.prepareStatement(deleteRentQuery); PreparedStatement pstmtCustomer = conn.prepareStatement(deleteCustomerQuery)) {

                // Set the parameter for both delete statements
                pstmtRent.setString(1, name);
                pstmtCustomer.setString(1, name);

                // Execute the delete statement on rent table
                int rentRowsDeleted = pstmtRent.executeUpdate();

                // Execute the delete statement on customer table
                int customerRowsDeleted = pstmtCustomer.executeUpdate();

                if (customerRowsDeleted > 0) {
                    conn.commit();  // Commit transaction if both deletions succeed
                    clearFields();
                    loadcusNames(); // Refresh the customer list
                } else {
                    JOptionPane.showMessageDialog(this, "Customer not found. Deletion failed.");
                    conn.rollback();  // Rollback if customer not found
                }
            } catch (SQLException e) {
                conn.rollback();  // Rollback in case of error
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting customer and associated rentals.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String name = textname2.getText();
        String address = textadd.getText();
        String phone = txtphone.getText();
        String email = txtmail.getText();
        String remark = txtRemark.getText();

// Validation: Check for required fields
        if (name.isEmpty() || address.isEmpty() || phone.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all required fields correctly.");
            return;
        }

// Validation: Phone number format
        if (!isValidPhone(phone)) {
            JOptionPane.showMessageDialog(this, "Invalid phone number. Please enter a valid 10-digit number.");
            return;
        }

// Validation: Email format
        if (!isValidEmail(email)) {
            JOptionPane.showMessageDialog(this, "Invalid email address. Please enter a valid email.");
            return;
        }

// Queries to check uniqueness of phone and email, excluding the current customer
        String checkPhoneQuery = "SELECT COUNT(*) FROM customer WHERE cus_phone = ? AND cus_id <> ?";
        String checkEmailQuery = "SELECT COUNT(*) FROM customer WHERE cus_email = ? AND cus_id <> ?";
        String updateQuery = "UPDATE customer SET cus_name = ?, cus_address = ?, cus_phone = ?, cus_email = ?, cus_remark = ? WHERE cus_id = ?";

        try (Connection conn = DriverManager.getConnection(url, user, password); PreparedStatement checkPhoneStmt = conn.prepareStatement(checkPhoneQuery); PreparedStatement checkEmailStmt = conn.prepareStatement(checkEmailQuery); PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {

            // Check if the phone number is unique (excluding the current customer)
            checkPhoneStmt.setString(1, phone);
            checkPhoneStmt.setInt(2, selectedCustomerId);
            ResultSet rsPhone = checkPhoneStmt.executeQuery();
            rsPhone.next(); // Move the cursor to the first row
            if (rsPhone.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "A customer with this phone number already exists. Please use a different phone number.");
                return;
            }

            // Check if the email is unique (excluding the current customer)
            checkEmailStmt.setString(1, email);
            checkEmailStmt.setInt(2, selectedCustomerId);
            ResultSet rsEmail = checkEmailStmt.executeQuery();
            rsEmail.next(); // Move the cursor to the first row
            if (rsEmail.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, "A customer with this email already exists. Please use a different email.");
                return;
            }

            // Set the parameters for the update statement
            pstmt.setString(1, name);
            pstmt.setString(2, address);
            pstmt.setString(3, phone);
            pstmt.setString(4, email);
            pstmt.setString(5, remark);
            pstmt.setInt(6, selectedCustomerId);  // Use selectedCustomerId to identify the customer

            // Execute the update
            int rowsUpdated = pstmt.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Customer data updated successfully!");
                loadcusNames(); // Refresh the customer list if needed
                clearFields();  // Clear input fields
            } else {
                JOptionPane.showMessageDialog(this, "Customer not found. Update failed.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating customer data.");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String reportSource = "C:\\Users\\amjad\\Documents\\New folder\\Customer.jrxml";

            File file = new File(reportSource);
            if (!file.exists()) {
                System.out.println("File not found: " + file.getAbsolutePath());
                return;
            }

            JasperReport jasperReport = JasperCompileManager.compileReport(reportSource);

            // Assuming you have a database connection
            Connection connection = DriverManager.getConnection(url, user, password);
            // Fill the report with data
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, null, connection);

            // Display the report
            JasperViewer.viewReport(jasperPrint, false);

            // Close the connection
            connection.close();
        } catch (JRException e) {
            System.err.println("JRException: " + e.getMessage());
            e.printStackTrace();
        } catch (SQLException e) {
            System.err.println("SQLException: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Exception: " + e.getMessage());
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtRemarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemarkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemarkActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        clearFields();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtphoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtphoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtphoneActionPerformed

    private void textaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textaddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textaddActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Dashboard myProfile = new Dashboard(username); // Pass the current username
        myProfile.setVisible(true); // Show the MyProfile form
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JList<String> jList3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField textadd;
    private javax.swing.JTextField textname2;
    private javax.swing.JTextField txtRemark;
    private javax.swing.JTextField txtmail;
    private javax.swing.JTextField txtphone;
    // End of variables declaration//GEN-END:variables
}
